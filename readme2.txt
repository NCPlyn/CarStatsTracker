9 pin LoRa - SPI
2pin gyro - I2C
2 pin sim - UART
2 PIN GPS - UART
4 sd card - SPI
----------------------------------------------
gyro - hotovo
lora - hotovo
gps - hotovo
sd - hotovo
gsm - vůbec nic
web - hotovo
----------------------------------------------
normal mode:
-every 10s sample gyro data and declare if we are moving or not
-if we started moving, create new ride file+id, start sending lora every so often with that id(start/wake gps)
-if we stopped-no moving detection for few minutes (gyro or gps(distancefrom func)), end file and stop lora, sleep gps
drag mode:
-listen for ready on web/display
-when gyro movement detected (not false positive), start logging all goals
-after deacc- save all to drag file
-repeat until switched to normal
GSM:
-get current gps pos
-upload to server
WIFI:
-dump all on wifi internet connect
-control panel to change settings
-see drags, taken routes, info about them (how long, fastest speed,map,id,when taken, etc.)
-(same on nodejs server)

https://eu1.cloud.thethings.network/console/applications/carstatstracker/data

openssl req -newkey rsa:2048 -x509 -nodes -keyout privatekey.pam -new -out certificate.pem -subj /CN=example.com -reqexts SAN -extensions SAN -config config.txt -sha256 -days 3650

rideId,moving(y/n),lat,lng,kmph,epochTime

----------------------------------------------

1. odzkoušet vše zatím (drag,lora,wifi)
2. bug/stress test

SHOULD DO:
260???
GSM - celé na esp



NOT GONNA DO:
lora - přejít na Helium?
drag - server(upload+view) & esp(upload)

bacha hesla v config a basicauth

----------------------------------------------
WEB:
/opmode - GET - Changes working loop mode from normal ride to drag and viceversa
  val: 0 = normal, 1 = drag
/doDrag - GET - Proceses needed drag information, recalibrates accelerometer and starts waiting for movement
  json: json with needed data generated by the website
/forceDragStop - GET - Forces drag to stop by stoping the while loop
/forceDragStart - GET - Forces drag to start, ommitting movement, still needs /doDrag
/calibrate - GET - Recalibration if needed
/getSpeed - GET - Returns current speed
/getProcDrag - GET - Returns JSON with current state of dragy
/lora - GET - Returns loraStatus, if sent with "join" param, tries to join LoraWAN.
/wifi - GET - Returns WiFi.status(), if sent with "join" param, tries to join WiFi STA.
/getfile - GET - Returns content of file from SDCard
  rideid: which rideid/dragid we want
/getfiles - GET - Returns all of the files on the SDCard root seperated by ;
/saveconfig - GET - Saves config with supplied data
  enaLora: if Lora or GSM should be used
  currentDragID & currentRideID
  detectVal: a float number how sensitive the detection of movement should be
